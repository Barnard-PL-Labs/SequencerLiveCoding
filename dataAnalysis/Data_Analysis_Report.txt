The data files were separated into two groups: Empty and TBR (to be read). This reduced the data available by about 3/4 (334 empty files to 111 TBR files). The 111 log files however provided enough data to analyze interactionwieh the tool.

Code to loop through all the folders in TBR was written with the help of Mark. It is important to note here that using .readline() will only read the first line of every log and not the whole log. .read() works well but in instances where you need to analyze line by line, a for loop has to be created for every f. It is also important to note that every log file has an empty last line and that the length of the first line is sometimes shorter than all subsequent lines.

To analyze the ratio of clickEvents to keyEvents, the function countEvents() was used. The function iterates through all folders and counts every instance of clickEvent and keyEvent. There were a total of 2711 clickEvents and 3879  The ratio was calculated as a percentage of each event to the total events (41:59). We can roughly assume that there is no major difference in whether people are most likely to use clicks or keys on the tool.

To analyze whether some users used particular event over another, the function eventEvolv() was used. The function calculated the total click and key events per user and determined whether both, onlyClick or onlyClick events were present. 2 users (1.8%) used only keyEvents, 42 users (37.8%) used only clickEvents and 67 users (60.4%) used both events. So while the majority of users used both events, users are more likely to use clickEvents only than keyEvents only. The pie chart userEvents.png helps to display this visually. This implies that the majority of the users are interacting with the tool as intended but that more needs to be done so that the percentage of people using both events increases. We already determined that the ratio of the total events was nearly 50/50.

To analyze the keyEvents, the function key	Analysis() was used. The function creates a dictionary of keys (keyDict) and updates the values of all recorded keys as it iterates through TBR. A total of 81 different keys were clicked. The data was analyzed through a frequency table and a histogram. The histogram (keyAnalysis.png) is skewed, so while it shows the range of keys clicked, it is hard to interpret. The frequency table (keyFreqTable.png) helps us better understand which keys were mostly used. The most used keys were Backspace(617), Shift(401), ArrowLeft(167), ArrowRight(159), t(156), a(131), r(129), Enter(118) and .(105). Backspace being the most recently used key implies that people are deleting a lot of the code they write, which might imply that they are making a lot of mistakes or not understanding how they should write the code. Maybe more tutorials need to be made on syntax. It is also interesting to note that numbers are not among the most used keys even though one would expect them to be integral to the tool. This might imply that people are not aware of some of the keys and their functions which leads to the same conclusion reached above, that there needs to be more tutorials.

To analyze the time between successive clickEvents, the function timeAnalysis() was used. The function created two dictionaries: timeGenDict which contains a set (timeSet) of all the recorded times. This was used to create the histogram generalTime.png which serves to show the range of times recorded. Time after 200 seconds was omitted (most notably 825 seconds and 3408 seconds) as it skewed the graph considerably and was most probably for an event of someone	playing the music or distracted from the tool. In general, the graph shows that the majority of time was under 25 seconds and that fewer than half the times are above 50 seconds. To better understand the frequency of each recorded time, a frequency table (TimeFreq.png) was created from a second dictionary timeDict, that recorded time and its count. The table shows that the majority of times are between under-0 and 2 seconds and drop after 4 seconds. We may conclude that the optimal average time for successive click events is 3 seconds.

